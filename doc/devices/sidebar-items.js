initSidebarItems({"enum":[["Ac97Backend","AC97 audio device emulation. Provides the PCI interface for the internal Ac97 emulation. Internally the `Ac97BusMaster` and `Ac97Mixer` structs are used to emulated the bus master and mixer registers respectively. `Ac97BusMaster` handles moving smaples between guest memory and the audio backend."],["BusError",""],["HostHotPlugKey","The key to identify hotplug device from host view. like host sysfs path for vfio pci device, host disk file path for virtio block device"],["PciDeviceError",""],["PciInterruptPin","PCI has four interrupt pins A->D."],["PitError",""],["ProtectionType","Whether the VM should be run in protected mode or not."],["ProxyError","Errors for proxy devices."]],"macro":[["impl_from_for_interconvertible_structs","Implements `From` between two structs whose each field implements `From` each other."],["impl_try_from_le32_for_enumn","Implements TryFrom<data_model::Le32> for an enum that implements `enumn::N`."],["register",""],["register_array",""],["static_register","Macro helps to build a static register."],["usb_debug",""]],"mod":[["acpi",""],["bat",""],["direct_io",""],["direct_irq",""],["irqchip",""],["pl030",""],["serial_device",""],["usb",""],["vfio",""],["virtio","Implements virtio devices, queues, and transport mechanisms."]],"struct":[["Ac97Dev",""],["Ac97Parameters","Holds the parameters for a AC97 device"],["Bus","A device container for routing reads and writes over some address space."],["BusAccessInfo","Information about how a device was accessed."],["BusRange","Holds a base and length representing the address space occupied by a `BusDevice`."],["Cmos","A CMOS/RTC device commonly seen on x86 I/O port 0x70/0x71."],["I8042Device","A i8042 PS/2 controller that emulates just enough to shutdown the machine."],["PciAddress","PCI Device Address, AKA Bus:Device.Function"],["PciBridge",""],["PciConfigIo","Emulates PCI configuration access mechanism #1 (I/O ports 0xcf8 and 0xcfc)."],["PciConfigMmio","Emulates PCI memory-mapped configuration access mechanism."],["PciRoot","Emulates the PCI Root bridge."],["PcieRootPort",""],["Pit",""],["ProxyDevice","Wraps an inner `BusDevice` that is run inside a child process via fork."],["Serial","Emulates serial COM ports commonly seen on x86 I/O ports 0x3f8/0x2f8/0x3e8/0x2e8."],["VfioPciDevice","Implements the Vfio Pci device, then a pci device is added into vm"],["VfioPlatformDevice",""],["VirtioPciDevice","Implements the PCI transport for virtio devices."]],"trait":[["BusDevice","Trait for devices that respond to reads or writes in an arbitrary address space."],["BusDeviceObj","Trait for generic device abstraction, that is, all devices that reside on BusDevice and want to be converted back to its original type. Each new foo device must provide as_foo_device() + as_foo_device_mut() + into_foo_device(), default impl methods return None."],["BusDeviceSync",""],["BusResumeDevice",""],["HotPlugBus","Trait for devices that notify hotplug event into guest"],["PciDevice",""]]});